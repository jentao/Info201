wide_data <- select(wide_data, state, location, both_sexes)
} else if (sexes == "females"){
wide_data <- select(wide_data, state, location, females)
} else if (sexes == "males"){
wide_data <- select(wide_data, state, location, males)
} else{
return ('Please enter "both", "females", or "males" as input for sexes')
}
## get the highest/lowest drinking level
if (level == "max"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(desc(wide_data[,3]))==1)
}else if (level == "min"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(wide_data[,3])==1)
}else {
return ('Please enter "min" or "max" as input for sexes')
}
## print answer
paste("The ", level, " level of any ", sexes, " drinking rate in ",
statename, " in ", year, " is ", desired_row[1,3])
}
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
ask_question("max", "Washington", "females", "2012")
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
any_drinking_question("max", "Washington", "females", "2012")
any_drinking_question <- function(level, statename, sexes, year){
## get data of the state
state_data <- filter(any_drinking, state == statename)
## convert wide form to long form
long_data <- state_data %>% gather(sexes, rate, both_sexes_2002:males_2012)
## get the data of the year
year_data <- filter(long_data, sexes == paste("both_sexes_", year, sep = "") |
sexes == paste("males_", year, sep = "") |
sexes == paste("females_", year, sep = ""))
## convert it back to wide data
wide_data <- year_data %>% spread(sexes, rate)
## drop the year in column names
colnames <- c("state","location", "both_sexes", "females", "males")
colnames(wide_data) <- colnames
## get data of the sexes
if (sexes == "both"){
wide_data <- select(wide_data, state, location, both_sexes)
} else if (sexes == "females"){
wide_data <- select(wide_data, state, location, females)
} else if (sexes == "males"){
wide_data <- select(wide_data, state, location, males)
} else{
return ('Please enter "both", "females", or "males" as input for sexes')
}
## get the highest/lowest drinking level
if (level == "max"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(desc(wide_data[,3]))==1)
}else if (level == "min"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(wide_data[,3])==1)
}else {
return ('Please enter "min" or "max" as input for sexes')
}
## print answer
paste("The ", level, " level of any ", sexes, " drinking rate in ",
statename, " in ", year, " is ", desired_row[1,3], sep="")
}
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
any_drinking_question("max", "Washington", "females", "2012")
any_drinking_question("min", "Virginia", "both", "2002")
any_drinking_question("mon", "Virginia", "both", "2002")
install.packages("styler")
library(styler)
install.packages("lintr")
library(lintr)
getwd()
setwd("~/Documents/projects/info201/a4-dplyr-jentao")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
source('~/Documents/projects/info201/a4-dplyr-jentao/assignment.R', echo=TRUE)
## convert wide form to long form
long_data <- state_data %>% gather(sexes, rate, both_sexes_2002:males_2012)
### a4: data wrangling with dplyr
## In this problem set we want you to programmatically print meaningful answers where applicable.
## For instance, if the question is What is the binge drinking rate in the US in 2012?, the answer
## should be something like this (as a comment):
## 2012 binge drinking rate in the US was 56%
##
## The printed answer should be brief and explanatory, so persons who know the data and questions
## can understand it. And it should be correct too! Also, be reasonable. If the question is to
## "create a subdata for year 2012", you just create the data and do not print out 3000 lines!
## When you run (source) your whole script, it should output the messages so they form a readable
## text. If in doubt imagine you are creating a report for Congress, for busy politicians who want
## to get the relevant answers quickly.
################################### Set up ###################################
## Install dplyr (if not installed)
##install.packages("dplyr")
## Ensure your working directory is the appropriate project folder
##setwd("~/Documents/projects/info201/a4-dplyr-jentao/")
## load dplyr package
library("dplyr")
# Read in `any_drinking.csv` data using relative path
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
# Read in `binge.drinking.csv` data using relative path
binge_drinking <- read.csv("data/binge_drinking.csv", stringsAsFactors = FALSE)
## Create a directory (using R) called "output" in your project directory
## Make sure the code works and does not print any warnings in case the directory already exists
dir.create("output")
################################### Any drinking in 2012 ###################################
# For this first section, you will work only with the *any drinking* dataset.
# In particular, we'll focus on data from 2012, keeping track of the `state` and `location` variables
# Create a data_frame that has the `state` and `location` columns, and all columns with data from 2012
data_2012 <- select(any_drinking, state, location, both_sexes_2012:males_2012)
# Using the 2012 data, create a column that has the difference in male and female drinking patterns
data_2012 <- mutate(data_2012, difference = males_2012 - females_2012)
## Write your 2012 data to a .csv file in your `output/` directory with a good descriptive filename
## Make sure to exclude rownames
##setwd("~/Documents/projects/info201/a4-dplyr-jentao/")
write.csv(data_2012, "output/any_drinking_2012.csv", row.names = FALSE)
## Are there any locations where females drink more than males?
## Create a *dataframe* of the locations, states, and differences for all locations where females drink more than males
## (no extra columns).
more_females_drink <- filter(data_2012, difference < 0)
## What is the location in which male and female drinking rates are most similar
## (*absolute* difference is smallest)?
## Your answer should be a *dataframe* of the location, state, and value of interest
## (no extra columns)
smallest_diff <- data_2012 %>%
select(state, location, difference) %>%
arrange(difference) %>%
head(1)
## As you've (hopefully) noticed, the `location` column includes national, state, and county level
## estimates. However, many audiences may only be interested in the *state* level data.
## Given that, you should do the following:
## * Create a new variable that is only the state level observations in 2012
## * For the sake of this analysis, you should treat Washington D.C. as a *state*
state_data_2012 <-  data_2012 %>%
filter(location == state)
## Which state had the **highest** drinking rate for both sexes combined?
## Your answer should be a *dataframe* of the state and value of interest (no extra columns)
highest_rate_both_sexes <- state_data_2012 %>%
select(state, both_sexes_2012) %>%
arrange(desc(both_sexes_2012)) %>%
head(1)
## Which state had the **lowest** drinking rate for both sexes combined?
## Your answer should be a *dataframe* of the state and value of interest (no extra columns)
lowest_rate_both_sexes <- state_data_2012 %>%
select(state, both_sexes_2012) %>%
arrange(both_sexes_2012) %>%
head(1)
## What was the difference in (any-drinking) prevalence between the state with the highest level of
## consumption, and the state with the lowest level of consumption?
## Your answer should be a single value (a dataframe storing one value is fine).
print(highest_rate_both_sexes[1, "both_sexes_2012"] -
lowest_rate_both_sexes[1, "both_sexes_2012"])
## Write your 2012 state data to an appropriately named file in your `output/` directory
## Make sure to exclude rownames
write.csv(state_data_2012, "output/state_any_drinking_2012.csv",
row.names = FALSE)
## Write a function that allows you to specify a state, then saves a .csv file with only observations from
## that state. This includes data about the state itself, as well as the counties within the state
## You should use the entire any.drinking dataset for this function
## The file you save in the `output` directory indicates the state name
## Make sure to exclude rownames!
choose_state <- function(name){
state_data <- filter(any_drinking, state == name)
filename <- paste("output/", name, "_any_drinking.csv", sep = "")
write.csv(state_data, filename, row.names = FALSE)
print("Successful")
}
## Demonstrate your function works by passing 3 states of your choice to the function
choose_state("Virginia")
choose_state("Maryland")
choose_state("Washington")
################################### Binge drinking Dataset ###################################
## In this section, we'll ask a variety of questions regarding our binge drinking dataset
## Moreover, we'll be looking at a subset of the observations which is just the counties
## (i.e., exclude state/national estimates)
## In order to ask these questions, you'll need to first prepare a subset of the data for this section:
## Create a dataframe with only the county level observations from the binge_drinking dataset
## This does include "county-like" areas such as parishes and boroughs
## You should (again) think of Washington D.C. as a state, and therefore *exclude it here*
county_data_binge <-  filter(binge_drinking,
location != state & state != "National")
## What is the average level of binge drinking in 2012 for both sexes (across the counties)?
average_county_2012 <- county_data_binge %>%
select(both_sexes_2012) %>%
summarise(mean = mean(both_sexes_2012))
paste("the average level of binge drinking in 2012 for both sexes is",
average_county_2012[1, 1])
## What is the *minimum* level of binge drinking in each state in 2012 for both sexes (across the counties)?
## Your answer should contain roughly 50 values (one for each state), unless there are two counties in a
## state with the same value
## Your answer should be a *dataframe* with the 2012 binge drinking rate, location, and state
min_binge_county_2012 <- county_data_binge %>%
select(state, location, both_sexes_2012) %>%
group_by(state) %>%
filter(min_rank(both_sexes_2012) == 1)
##summarise(min = min(both_sexes_2012)) %>%
##left_join(select(county_data_binge, min = both_sexes_2012, location))
## What is the *maximum* level of binge drinking in each state in 2012 for both sexes (across the counties)?
## Your answer should be a *dataframe* with the value of interest, location (county), and state
max_binge_county_2012 <- county_data_binge %>%
select(state, location, both_sexes_2012) %>%
group_by(state) %>%
filter(min_rank(desc(both_sexes_2012)) == 1)
## What is the county with the largest increase in male binge drinking between 2002 and 2012?
## Your answer should include the county, state, and value of interest
male_max_incr_county <- county_data_binge %>%
select(state, location, males_2002, males_2012) %>%
mutate(increase = males_2012 - males_2002) %>%
filter(min_rank(desc(increase)) == 1)
## How many counties experienced an increase in male binge drinking between 2002 and 2012?
## Your answer should be an integer (a dataframe with only one value is fine).
male_incr_county <- county_data_binge %>%
select(state, location, males_2002, males_2012) %>%
mutate(increase = males_2012 - males_2002) %>%
filter(increase > 0) %>%
count()
## What percentage of counties experienced an increase in male binge drinking between 2002 and 2012?
## Your answer should be a fraction or percent (we're not picky)
paste(round(male_incr_county[1, 1] / count(county_data_binge), digit = 3) * 100,
"%", sep = "")
## How many counties observed an increase in female binge drinking in this time period?
## Your answer should be an integer.
female_incr_county <- county_data_binge %>%
select(state, location, females_2002, females_2012) %>%
mutate(increase = females_2012 - females_2002) %>%
filter(increase > 0) %>%
count()
## What percentage of counties experienced an increase in female binge drinking between 2002 and 2012?
## Your answer should be a fraction or percent (we're not picky)
paste(round(female_incr_county[1, 1] / count(county_data_binge),
digit = 3) * 100, "%", sep = "")
## How many counties experienced a rise in female binge drinking *and* a decline in male binge drinking?
## Your answer should be an integer (a dataframe with only one value is fine)
frise_and_mdecline_county <- county_data_binge %>%
select(state, location, females_2002, females_2012,
males_2002, males_2012) %>%
mutate(male_increase = males_2012 - males_2002,
female_increase = females_2012 - females_2002) %>%
filter(female_increase > 0 & male_increase < 0) %>%
count()
################################### Joining Data ###################################
## You'll often have to join different datasets together in order to ask more involved questions of your
## dataset.
## Note that the dataframes include a large number of similar column names.
## You have to either rename these, or ensure that both will be renamed automatically
## with descriptive prefixes (or suffixes), such as 'any_' and 'binge_'.
keys <- c("state", "location")
both_colnames <- colnames(any_drinking)[3:length(colnames(any_drinking))]
any_colnames <- c(keys, paste("any_", both_colnames, sep = ""))
binge_colnames <- c(keys, paste("binge_", both_colnames, sep = ""))
colnames(any_drinking) <- any_colnames
colnames(binge_drinking) <- binge_colnames
## Join the dataframes: create a dataframe with all of the columns from both datasets.
## Think carefully about the *type* of join you want to do, and what the *keys*
## (identifiers) are
all_drinking <- full_join(any_drinking, binge_drinking)
## Create a column of difference between `any` and `binge` drinking for both sexes in 2012
ab_diff_2012 <- all_drinking %>%
select(any_both_sexes_2012, binge_both_sexes_2012) %>%
mutate(difference = any_both_sexes_2012, binge_both_sexes_2012) %>%
select(difference)
## Which location has the greatest *absolute* difference between `any` and `binge` drinking?
## Your answer should be a one row data frame with the state, location, and value of interest (difference)
max_diff_2012 <- all_drinking %>%
select(state, location, any_both_sexes_2012, binge_both_sexes_2012) %>%
mutate(difference = any_both_sexes_2012, binge_both_sexes_2012) %>%
filter(min_rank(desc(difference)) == 1) %>%
select(state, location, difference)
## Which location has the smallest *absolute* difference between `any` and `binge` drinking?
## Your answer should be a one row data frame with the state, location, and value of interest (difference)
min_diff_2012 <- all_drinking %>%
select(state, location, any_both_sexes_2012, binge_both_sexes_2012) %>%
mutate(difference = any_both_sexes_2012, binge_both_sexes_2012) %>%
filter(min_rank(difference) == 1) %>%
select(state, location, difference)
## ------------------------------ Write a function to ask your own question(s) ------------------------------
## Even in an entry level data analyst role, people are expected to come up with their own questions
## of interest (not just answer the questions that other people have). For this section, you should
## *write a function* that allows you to ask the same question on different subsets of data. For
## example, you may want to ask about the highest/lowest drinking level given a state or year. The
## purpose of your function should be evident given the input parameters and function name. However,
## add also explanation of what it does and what are the input parameters in comments inside the
## function definition.
##install.packages("tidyr")
library(tidyr)
## ask a question about the highest/lowest drinking level given a state in year
any_drinking_question <- function(level, statename, sexes, year){
## get data of the state
state_data <- filter(any_drinking, state == statename)
## convert wide form to long form
long_data <- state_data %>% gather(sexes, rate, both_sexes_2002:males_2012)
## get the data of the year
year_data <- filter(long_data, sexes == paste("both_sexes_", year, sep = "") |
sexes == paste("males_", year, sep = "") |
sexes == paste("females_", year, sep = ""))
## convert it back to wide data
wide_data <- year_data %>% spread(sexes, rate)
## drop the year in column names
colnames <- c("state", "location", "both_sexes", "females", "males")
colnames(wide_data) <- colnames
## get data of the sexes
if (sexes == "both"){
wide_data <- select(wide_data, state, location, both_sexes)
} else if (sexes == "females"){
wide_data <- select(wide_data, state, location, females)
} else if (sexes == "males"){
wide_data <- select(wide_data, state, location, males)
} else{
return ('Please enter "both", "females", or "males" as input for sexes')
}
## get the highest/lowest drinking level
if (level == "max"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(desc(wide_data[, 3])) == 1)
}else if (level == "min"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(wide_data[, 3]) == 1)
}else {
return ('Please enter "min" or "max" as input for sexes')
}
## print answer
paste("The ", level, " level of any ", sexes, " drinking rate in ",
statename, " in ", year, " is ", desired_row[1, 3], sep = "")
}
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
any_drinking_question("max", "Washington", "females", "2012")
any_drinking_question("min", "Virginia", "both", "2002")
################################### Challenge ###################################
## Using your function from part 1 (that wrote a .csv file given a state name), write a separate file
## for each of the 51 states (including Washington D.C.)
## The challenge is to do this in a *single line of (concise) code*
lapply(select(filter(any_drinking, location == state),
state)[, 1], choose_state)
## Using a dataframe of your choice from above, write a function that allows you to specify a *year* and
## *state* of interest,
## that saves a .csv file with observations from that state's counties (and the state itself)
## It should only write the columns `state`, `location`, and data from the specified year.
## Before writing the .csv file, you should *sort* the data_frame in descending order
## by the both_sexes drinking rate in the specified year.
## Again, make sure the file you save in the output directory indicates the year and state,
## and that it does not include row names.
##
## Note: depending on how you approach this problem, you may confront how dplyr uses *non-standard evaluation*
## Hint: https://cran.r-project.org/web/packages/dplyr/vignettes/nse.html
##
## Alternatively, I recommend to use 'tidyr' tools to transform the data into long form
## (into tidy form), perform selection in long form, and transform it back there after.
##
##setwd("~/Documents/projects/info201/a4-dplyr-jentao/")
##install.packages("tidyr")
library(tidyr)
any_drinking_of_year <- function(year, statename){
long_data <-  any_drinking %>% gather(sexes, rate, both_sexes_2002:males_2012)
year_data <- filter(long_data, sexes == paste("both_sexes_", year, sep = "") |
sexes == paste("males_", year, sep = "") |
sexes == paste("females_", year, sep = ""))
wide_data <- year_data %>% spread(sexes, rate)
wide_data <- filter(wide_data, state == statename)
colnames <- c(colnames(wide_data)[1:2], "both_sexes", "females", "males")
colnames(wide_data) <- colnames
output <- arrange(wide_data, desc(both_sexes))
filename <- paste("output/any_drinking_", year,
"_", statename, ".csv", sep = "")
write.csv(output, filename, row.names = FALSE)
print("Successful")
}
## Demonstrate that your function works by passing a year and state of your interest to the function
any_drinking_of_year("2012", "Virginia")
View(any_drinking)
any_drinking <- read.csv("data/any_drinking.csv", stringsAsFactors = FALSE)
## Demonstrate that your function works by passing a year and state of your interest to the function
any_drinking_of_year("2012", "Virginia")
## Demonstrate that your function works by passing a year and state of your interest to the function
any_drinking_of_year("2012", "Virginia")
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
any_drinking_question("max", "Washington", "females", "2012")
any_drinking_question <- function(level, statename, sexes, year){
## get data of the state
state_data <- filter(any_drinking, state == statename)
## convert wide form to long form
long_data <- state_data %>% gather(sexes, rate, both_sexes_2002:males_2012)
## get the data of the year
year_data <- filter(long_data, sexes == paste("both_sexes_", year, sep = "") |
sexes == paste("males_", year, sep = "") |
sexes == paste("females_", year, sep = ""))
## convert it back to wide data
wide_data <- year_data %>% spread(sexes, rate)
## drop the year in column names
colnames <- c("state", "location", "both_sexes", "females", "males")
colnames(wide_data) <- colnames
## get data of the sexes
if (sexes == "both"){
wide_data <- select(wide_data, state, location, both_sexes)
sexes = "both males and females"
} else if (sexes == "females"){
wide_data <- select(wide_data, state, location, females)
} else if (sexes == "males"){
wide_data <- select(wide_data, state, location, males)
} else{
return ('Please enter "both", "females", or "males" as input for sexes')
}
## get the highest/lowest drinking level
if (level == "max"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(desc(wide_data[, 3])) == 1)
}else if (level == "min"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(wide_data[, 3]) == 1)
}else {
return ('Please enter "min" or "max" as input for sexes')
}
## print answer
paste("The ", level, " level of any drinking rate of ", sexes, " in ",
statename, " in ", year, " is ", desired_row[1, 3], sep = "")
}
## After writing your function, *demonstrate* that the function works by passing in different
## parameters to your function.
any_drinking_question("max", "Washington", "females", "2012")
any_drinking_question("min", "Virginia", "both", "2002")
any_drinking_question <- function(level, statename, sexes, year){
## get data of the state
state_data <- filter(any_drinking, state == statename)
## convert wide form to long form
long_data <- state_data %>% gather(sexes, rate, both_sexes_2002:males_2012)
## get the data of the year
year_data <- filter(long_data, sexes == paste("both_sexes_", year, sep = "") |
sexes == paste("males_", year, sep = "") |
sexes == paste("females_", year, sep = ""))
## convert it back to wide data
wide_data <- year_data %>% spread(sexes, rate)
## drop the year in column names
colnames <- c("state", "location", "both_sexes", "females", "males")
colnames(wide_data) <- colnames
## get data of the sexes
if (sexes == "both"){
wide_data <- select(wide_data, state, location, both_sexes)
sexes = "both males and females"
} else if (sexes == "females"){
wide_data <- select(wide_data, state, location, females)
} else if (sexes == "males"){
wide_data <- select(wide_data, state, location, males)
} else{
return ('Please enter "both", "females", or "males" as input for sexes')
}
## get the highest/lowest drinking level
if (level == "max"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(desc(wide_data[, 3])) == 1)
level = "maximum"
}else if (level == "min"){
## get the row with max volue on column 3 (the sexes column)
desired_row <- wide_data %>%
filter(min_rank(wide_data[, 3]) == 1)
level = "minimum"
}else {
return ('Please enter "min" or "max" as input for sexes')
}
## print answer
paste("The ", level, " level of any drinking rate of ", sexes, " in ",
statename, " in ", year, " is ", desired_row[1, 3], sep = "")
}
any_drinking_question("min", "Virginia", "both", "2002")
lintr::lint("assignment.R")
head(iris)
with(iris, plot(Sepal.length ~Sepal.Width))
cat(nrow(iris))
with(iris, plot(Sepal.Length ~Sepal.Width))
with(iris, plot(Sepal.Length ~Sepal.Width, col = Species))
with(iris, plot(Sepal.Length ~Sepal.Width, col = Species, psc = 16))
with(iris, plot(Sepal.Length ~Sepal.Width, col = Species, psc = 16, cex = 2))
cat(nrow(iris), "different flowers \n")
warnings()
with(iris,
plot(Sepal.Length ~Sepal.Width,
col = Species, cex = 2)
)
cat(nrow(iris), "different flowers \n")
source('~/Documents/projects/info201/play/play-with-server.R', echo=TRUE)
install.packages("magrittr")
## load API keys
source("keys.R")
## load API keys
source("keys.R")
## you may also load necessary libraries and set various options here
library(dplyr)
knitr::opts_chunk$set(error=TRUE)
# continue compiling on error
install.packages("jsonlite")  # once per machine
library("jsonlite")
library(httr)
